plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.joker.boilerplate'
    compileSdk 32

    // MARK: version increment
    def versionInfo = getProps('./configs/version.properties')

    // MARK: Check command
    def runTasks = gradle.startParameter.taskNames

    if (':app:assembleRelease' in runTasks) {
        versionInfo['VERSION_MAJOR'] = versionInfo['VERSION_MAJOR'].toInteger() + 1
    } else if (':app:assembleDebug' in runTasks) {
        versionInfo['VERSION_PATCH'] = "" + (versionInfo['VERSION_PATCH'].toInteger() + 1)
        setProps(versionInfo, './configs/version.properties')
    } else {
        versionInfo['VERSION_BUILD'] = "" + (versionInfo['VERSION_BUILD'].toInteger() + 1)
        setProps(versionInfo, './configs/version.properties')
    }

    // MARK: Signing Config
    signingConfigs {
        release {
            storeFile file("./configs/release.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        staging {
            storeFile file("./configs/staging.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        debug {
            storeFile file("./configs/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "com.joker.boilerplate"
        minSdk 23
        targetSdk 32

        versionCode versionInfo['VERSION_BUILD'].toInteger()
        versionName "${versionInfo['VERSION_NUMBER']}.${versionInfo['VERSION_MINOR']}.${versionInfo['VERSION_MAJOR']}.${versionInfo['VERSION_PATCH']}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // MARK: configuration
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":"$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue "string", "app_name", versionInfo['APPLICATION']
            getProps('./configs/production.properties').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }

        staging {
            applicationIdSuffix ".staging"
            signingConfig signingConfigs.staging
            resValue "string", "app_name", versionInfo['APPLICATION'] + " - Staging"
            getProps('./configs/staging.properties').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }

        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            resValue "string", "app_name", versionInfo['APPLICATION'] + " - Development"
            getProps('./configs/development.properties').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }

        applicationVariants.all {
            variant ->
                variant.outputs.each {
                    output ->
                        def newName = output.outputFile.name
                        def formattedDate = new Date().format('yyyy-MM-dd')
                        project.ext { appName = "${versionInfo['APPLICATION']} ${variant.versionName} (${variant.versionCode})" }
                        newName = newName.replace("app-", "${formattedDate} - ${project.ext.appName} ")
                        output.outputFileName  = newName
                }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}

// MARK: for get information properties file in config
def getProps (path) {
    File propertiesFile = file(path)
    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))
        return properties
    } else {
        throw new GradleException("Could not read properties file on " + path)
    }
}

// MARK: for set information properties file in config
def setProps (data, path) {
    Properties tempProperties = data
    File tempFile = file(path)
    tempProperties.store(tempFile.newWriter(), null)
}